<?php
declare(strict_types=1);

namespace App\Controller;

/**
 * Matches Controller
 *
 * @property \App\Model\Table\MatchesTable $Matches
 * @property \App\Model\Table\TeamsTable $Teams
 * @method \App\Model\Entity\Match[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class MatchesController extends AppController
{
    public function initialize(): void
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->Teams = $this->fetchTable('Teams');
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null|void Renders view
     */
    public function index()
    {
        $matches = $this->paginate($this->Matches);

        $this->set(compact('matches'));
    }

    /**
     * View method
     *
     * @param string|null $id Match id.
     * @return \Cake\Http\Response|null|void Renders view
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $match = $this->Matches->get($id, [
            'contain' => [],
        ]);

        $this->set(compact('match'));
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $match = $this->Matches->newEmptyEntity();
        if ($this->request->is('post')) {
            $dataRaw = $this->getRequest()->getData();
            $bleuTeamName = $this->Teams->find()->where(['Teams.id'=>$dataRaw['bleu_team_id']])->firstOrFail();
            $redTeamName = $this->Teams->find()->where(['Teams.id'=>$dataRaw['red_team_id']])->firstOrFail();
//            dd($bleuTeamName);
            $data = [
                'bleu_team_id'=> $dataRaw['bleu_team_id'],
                'bleu_team_name'=>$bleuTeamName->name,
                'red_team_id'=> $dataRaw['red_team_id'],
                'red_team_name'=>$redTeamName->name,
                'timer'=>$dataRaw['timer'],
                'room_code'=>$dataRaw['room_code']
            ];

            $match = $this->Matches->patchEntity($match, $data);
//            dd($match);
            if ($this->Matches->save($match)) {
                $this->Flash->success(__('The match has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The match could not be saved. Please, try again.'));
        }
        $randomRoomCode = rand(1,1000);
        $teams = $this->Teams->find('list')->all();
        $this->set(compact('match','teams','randomRoomCode'));
    }

    /**
     * Edit method
     *
     * @param string|null $id Match id.
     * @return \Cake\Http\Response|null|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $match = $this->Matches->get($id, [
            'contain' => [],
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $match = $this->Matches->patchEntity($match, $this->request->getData());
            if ($this->Matches->save($match)) {
                $this->Flash->success(__('The match has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The match could not be saved. Please, try again.'));
        }
        $this->set(compact('match'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Match id.
     * @return \Cake\Http\Response|null|void Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $match = $this->Matches->get($id);
        if ($this->Matches->delete($match)) {
            $this->Flash->success(__('The match has been deleted.'));
        } else {
            $this->Flash->error(__('The match could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }
    public function matchRoom($id){
//        dd($id);
    }
}
